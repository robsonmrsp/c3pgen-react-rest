/* SuggestionÂ´s Form generated by JSetup v0.95 :  at 01/12/2019 12:41:14 */  
import React, { Component } from "react";
import { NavLink } from "react-router-dom";
import { Alert, Button, FormGroup, ControlLabel, FormControl, HelpBlock } from "react-bootstrap";

import HttpRequest from "../core/HttpRequest";
import JSInputField from "../core/JSInputField";
import JSCombobox from "../core/JSCombobox";
import Message from "../core/Message";


import { isEmpty, isNotEmpty } from "../core/JSUtils";

const emptySuggestion = {
	id: '',
	expirationDate: '',    	
};

export default class FormSuggestion extends React.Component {
    constructor() {
        super();
        this.service = new HttpRequest("/rs/crud/suggestions");
        
        this.state = {
            suggestion: emptySuggestion,
		
            message: new Message(),
            showMessage: false,

            validationFields: {
            }
        }
    }
    componentDidMount = () => {
    
    }
    getValidationState = (fieldName) => {
        if (this.state.validationFields[fieldName]) {
            if (!(this.state.validationFields[fieldName].isValid())) {
                return "error";
            }
        }
        return null;
    }
    
	getValidationMessage = (fieldName) => {
        const fieldValidator = this.state.validationFields[fieldName];
        if (fieldValidator) {
            return fieldValidator.message;
        }
        return false;
    }
    
    validateField = (fieldName) => {
        const fieldValidator = this.state.validationFields[fieldName];
        if (fieldValidator) {
            return fieldValidator.isValid && fieldValidator.isValid();
        }
        return "";
    }

    submitFormHandle = (clickEvent) => {
        console.log("Salvando o objeto: " + this.state.suggestion);
        this.service.save(
            this.state.suggestion,
            data => {
                this.suggestion = data;
				this.setState({ message: new Message("success", "Success saving Suggestion"), showMessage: true })
                this.setState({ suggestion: emptySuggestion });

            },
            error => {
                console.error("error saving suggestion ", error);
				this.setState({ message: new Message("danger", "Error saving Suggestion"), showMessage: true })
            }
        );
    }

    changeFormDateHandle = (name, value) => {
    	const suggestion = { ...this.state.suggestion };
        suggestion[name] = value;
        this.setState({ suggestion });
    }

    render = () => {
        return (
            <div className="panel">
                <div className="panel-heading">
                    <h3 className="panel-title">Cadastro de Suggestion</h3>
                </div>
                <div className="panel-body">
                    <div className="panel">
                        <div className="panel-body">
                            {this.state.showMessage ?
                                <Alert bsStyle={this.state.message.type} onDismiss={() => { this.setState({ showMessage: false }) }}>
                                    {this.state.message.text}
                                </Alert>
                                
                                : null
                            }                        
                            <form>
                                <FormGroup controlId="expirationDate" validationState={this.getValidationState("expirationDate")} >
                                    <ControlLabel>Expiration date</ControlLabel>
                                    <JSInputField name="expirationDate" plugin="date" type="text" value={this.state.suggestion.expirationDate}  onChange={(event) => this.changeFormDateHandle("expirationDate", event.target.value)} className="form-control" />
                                    <FormControl.Feedback />
                                    <HelpBlock className={this.validateField("expirationDate") ? "hide" : "block"} >{this.getValidationMessage("expirationDate")}</HelpBlock>
                                </FormGroup>
                                
                            </form>
                        </div>
                    </div >
                    <div >
                        <div className="clearfix form-actions">
                            <button onClick={this.submitFormHandle} className="btn btn-primary btn-lg " >
                                <i className="fa fa-check " />
                                &nbsp; Salvar
                            </button>
                            &nbsp;
                            <button onClick={this.handleClick} className="btn btn-primary btn-lg ">
                                <i className="fa fa-check " />
                                &nbsp; Salvar e continuar
                            </button>
                            &nbsp;
                            
                            <NavLink to="/suggestions/list" className="btn-lg btn btn-light">
								<i className=" fa fa-undo " />
                                &nbsp; Voltar para a listagem
                             </NavLink>
                        </div >
                    </div >
                </div >
            </div >
        )
    }
}

