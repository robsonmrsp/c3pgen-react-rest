/* ProfileÂ´s Form generated by JSetup v0.95 :  at 01/12/2019 12:41:14 */  
import React, { Component } from "react";
import { NavLink } from "react-router-dom";
import { Alert, Button, FormGroup, ControlLabel, FormControl, HelpBlock } from "react-bootstrap";

import HttpRequest from "../core/HttpRequest";
import JSInputField from "../core/JSInputField";
import JSCombobox from "../core/JSCombobox";
import Message from "../core/Message";


import { isEmpty, isNotEmpty } from "../core/JSUtils";

const emptyProfile = {
	id: '',
	avatar: '',    	
	birthDate: '',    	
	name: '',    	
};

export default class FormProfile extends React.Component {
    constructor() {
        super();
        this.service = new HttpRequest("/rs/crud/profiles");
        
        this.state = {
            profile: emptyProfile,
		
            message: new Message(),
            showMessage: false,

            validationFields: {
            }
        }
    }
    componentDidMount = () => {
    
    }
    getValidationState = (fieldName) => {
        if (this.state.validationFields[fieldName]) {
            if (!(this.state.validationFields[fieldName].isValid())) {
                return "error";
            }
        }
        return null;
    }
    
	getValidationMessage = (fieldName) => {
        const fieldValidator = this.state.validationFields[fieldName];
        if (fieldValidator) {
            return fieldValidator.message;
        }
        return false;
    }
    
    validateField = (fieldName) => {
        const fieldValidator = this.state.validationFields[fieldName];
        if (fieldValidator) {
            return fieldValidator.isValid && fieldValidator.isValid();
        }
        return "";
    }

    submitFormHandle = (clickEvent) => {
        console.log("Salvando o objeto: " + this.state.profile);
        this.service.save(
            this.state.profile,
            data => {
                this.profile = data;
				this.setState({ message: new Message("success", "Success saving Profile"), showMessage: true })
                this.setState({ profile: emptyProfile });

            },
            error => {
                console.error("error saving profile ", error);
				this.setState({ message: new Message("danger", "Error saving Profile"), showMessage: true })
            }
        );
    }

    changeFormDateHandle = (name, value) => {
    	const profile = { ...this.state.profile };
        profile[name] = value;
        this.setState({ profile });
    }

    render = () => {
        return (
            <div className="panel">
                <div className="panel-heading">
                    <h3 className="panel-title">Cadastro de Profile</h3>
                </div>
                <div className="panel-body">
                    <div className="panel">
                        <div className="panel-body">
                            {this.state.showMessage ?
                                <Alert bsStyle={this.state.message.type} onDismiss={() => { this.setState({ showMessage: false }) }}>
                                    {this.state.message.text}
                                </Alert>
                                
                                : null
                            }                        
                            <form>
                                <FormGroup controlId="avatar" validationState={this.getValidationState("avatar")} >
                                    <ControlLabel>Avatar</ControlLabel>
                                    <JSInputField name="avatar" type="text" value={this.state.profile.avatar}  onChange={(event) => this.changeFormDateHandle("avatar", event.target.value)} className="form-control" />
                                    <FormControl.Feedback />
                                    <HelpBlock className={this.validateField("avatar") ? "hide" : "block"} >{this.getValidationMessage("avatar")}</HelpBlock>
                                </FormGroup>
                                
                                <FormGroup controlId="birthDate" validationState={this.getValidationState("birthDate")} >
                                    <ControlLabel>Birth date</ControlLabel>
                                    <JSInputField name="birthDate" plugin="date" type="text" value={this.state.profile.birthDate}  onChange={(event) => this.changeFormDateHandle("birthDate", event.target.value)} className="form-control" />
                                    <FormControl.Feedback />
                                    <HelpBlock className={this.validateField("birthDate") ? "hide" : "block"} >{this.getValidationMessage("birthDate")}</HelpBlock>
                                </FormGroup>
                                
                                <FormGroup controlId="name" validationState={this.getValidationState("name")} >
                                    <ControlLabel>Name</ControlLabel>
                                    <JSInputField name="name" type="text" value={this.state.profile.name}  onChange={(event) => this.changeFormDateHandle("name", event.target.value)} className="form-control" />
                                    <FormControl.Feedback />
                                    <HelpBlock className={this.validateField("name") ? "hide" : "block"} >{this.getValidationMessage("name")}</HelpBlock>
                                </FormGroup>
                                
                            </form>
                        </div>
                    </div >
                    <div >
                        <div className="clearfix form-actions">
                            <button onClick={this.submitFormHandle} className="btn btn-primary btn-lg " >
                                <i className="fa fa-check " />
                                &nbsp; Salvar
                            </button>
                            &nbsp;
                            <button onClick={this.handleClick} className="btn btn-primary btn-lg ">
                                <i className="fa fa-check " />
                                &nbsp; Salvar e continuar
                            </button>
                            &nbsp;
                            
                            <NavLink to="/profiles/list" className="btn-lg btn btn-light">
								<i className=" fa fa-undo " />
                                &nbsp; Voltar para a listagem
                             </NavLink>
                        </div >
                    </div >
                </div >
            </div >
        )
    }
}

